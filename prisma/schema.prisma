generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  firstName     String?        @map("first_name") @db.VarChar(32)
  lastName      String?        @map("last_name") @db.VarChar(32)
  image         String?
  sex           String?        @db.VarChar(32)
  email         String?        @unique @db.VarChar(64)
  password      String?
  emailVerified DateTime?      @map("email_verified")
  nationalId    String?        @unique @map("national_id")
  role          Role           @default(PATIENT)
  isActive      Boolean        @default(true)
  accounts      Account[]
  doctor        Doctor?
  labAssistant  LabAssistant?
  labSupervisor LabSupervisor?
  patient       Patient?
  receptionist  Receptionist?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Doctor {
  employeeId     String          @id @map("employee_id")
  employmentDate DateTime        @default(now()) @map("employment_date")
  speciality     Specializations @default(SURGERY)
  user           User            @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  visits         Visit[]
  messages       Message[]

  @@map("doctors")
}

model Receptionist {
  employeeId     String   @id @map("emplyee_id")
  employmentDate DateTime @default(now()) @map("employment_date")
  user           User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  visits         Visit[]

  @@map("receptionists")
}

model LabSupervisor {
  employeeId             String                  @id @map("emplyee_id")
  employmentDate         DateTime                @default(now()) @map("employment_date")
  user                   User                    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  laboratoryExaminations LaboratoryExamination[]

  @@map("lab_supervisors")
}

model LabAssistant {
  employeeId             String                  @id @map("emplyee_id")
  employmentDate         DateTime                @default(now()) @map("employment_date")
  user                   User                    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  laboratoryExaminations LaboratoryExamination[]

  @@map("lab_assistants")
}

model Patient {
  patientId   String  @id @map("patient_id")
  insuranceId String? @unique @map("insurance_id")
  user        User    @relation(fields: [patientId], references: [id], onDelete: Cascade)
  visits      Visit[]
  messages    Message[]

  @@map("patients")
}

model Message{
  messageId   String  @id @default(cuid()) @map("message_id")
  dateCreated DateTime @default(now()) @map("date_created")
  content     String
  patientId   String @map("patient_id")
  patient     Patient @relation(fields: [patientId], references: [patientId], onDelete: Cascade)  
  doctorId    String @map("doctor_id")
  doctor      Doctor @relation(fields: [doctorId], references: [employeeId], onDelete: Cascade)  
}

model Visit {
  visitId                String                  @id @default(cuid()) @map("visit_id")
  description            String?
  diagnosis              String?
  status                 Status                  @default(REGISTERED)
  date                   DateTime
  dateCreated            DateTime                @default(now()) @map("date_created")
  dateRealized           DateTime?               @map("date_realized")
  doctorId               String                  @map("doctor_id")
  patientId              String                  @map("patient_id")
  receptionistId         String?                 @map("receptionist_id")
  patientNote            String?                 @map("patient_note")
  laboratoryExaminations LaboratoryExamination[]
  physicalExaminations   PhysicalExamination[]
  doctor                 Doctor                  @relation(fields: [doctorId], references: [employeeId], onDelete: Cascade)
  patient                Patient                 @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  receptionist           Receptionist?           @relation(fields: [receptionistId], references: [employeeId], onDelete: Cascade)

  @@map("visits")
}

model PhysicalExamination {
  physicalExamId        String                @id @default(cuid())
  dictionaryCode        String                @map("dictionary_code")
  visitId               String                @map("visit_id")
  status                ExaminationStatus     @default(COMPLETED)
  result                String?               @map("doctor_note")
  examinationDictionary ExaminationDictionary @relation(fields: [dictionaryCode], references: [code])
  visit                 Visit                 @relation(fields: [visitId], references: [visitId], onDelete: Cascade)

  @@map("physic_examinations")
}

model LaboratoryExamination {
  testId                       String                @id @default(cuid()) @map("test_id")
  doctorNote                   String?               @map("doctor_note")
  labTechnicianNote            String?               @map("lab_technician_note")
  supervisorNote               String?               @map("supervisor_note")
  status                       LaboratoryTestStatus  @default(ORDERED)
  dateOfExecutionXorCancelling DateTime?             @map("date_of_execution_xor_cancelling")
  dateOfApprovalXorRejection   DateTime?             @map("date_of_approval_xor_rejection")
  dictionaryCode               String                @map("dictionary_code")
  labAssistantId               String?               @map("lab_assistant_id")
  labSupervisorId              String?               @map("lab_supervisor_id")
  visitId                      String?               @map("visit_id")
  dateCreated                  DateTime              @default(now()) @map("date_created")
  result                       String?
  examinationDictionary        ExaminationDictionary @relation(fields: [dictionaryCode], references: [code])
  labAssistant                 LabAssistant?         @relation(fields: [labAssistantId], references: [employeeId], onDelete: Cascade)
  labSupervisor                LabSupervisor?        @relation(fields: [labSupervisorId], references: [employeeId], onDelete: Cascade)
  visit                        Visit?                @relation(fields: [visitId], references: [visitId])

  @@map("laboratory_examinations")
}

model ExaminationDictionary {
  code                  String                  @id @default(cuid())
  type                  String                  @default("")
  description           String?
  name                  String                  @default("")
  LaboratoryExamination LaboratoryExamination[]
  PhysicalExamination   PhysicalExamination[]

  @@map("examination_dictionaries")
}

enum Role {
  PATIENT
  DOCTOR
  LAB_SUPERVISOR
  LAB_ASSISTANT
  RECEPTIONIST
  ADMIN
}

enum Status {
  REGISTERED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ExaminationStatus {
  COMPLETED
  CANCELLED
}

enum LaboratoryTestStatus {
  ORDERED
  COMPLETED
  CANCELLED
  APPROVED
  REJECTED
  IN_PROGRESS
}

enum Specializations {
  GENERAL_PRACTICE
  INTERNAL_MEDICINE
  PEDIATRICS
  OBSTETRICS_AND_GYNECOLOGY
  CARDIOLOGY
  DERMATOLOGY
  ORTHOPEDICS
  GASTROENTEROLOGY
  NEUROLOGY
  PSYCHIATRY
  UROLOGY
  OPHTHALMOLOGY
  ENDOCRINOLOGY
  ONCOLOGY
  RHEUMATOLOGY
  ALLERGY_AND_IMMUNOLOGY
  SURGERY
}

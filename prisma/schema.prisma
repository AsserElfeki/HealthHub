generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  fname          String         @db.VarChar(32)
  lname          String?        @db.VarChar(32)
  sex            String?        @db.VarChar(32)
  email          String         @unique @db.VarChar(64)
  password       String
  emailVerified  DateTime?      @map("email_verified")
  nationalID     String         @unique @db.VarChar(11)
  role           Role           @default(PATIENT)
  doctor         Doctor?
  lab_assistant  LabAssistant?
  lab_supervisor LabSupervisor?
  patient        Patient?
  receptionist   Receptionist?
  sessions       Session[]

  @@map("users")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Doctor {
  employee_id Int     @id
  user        User    @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  visits      Visit[]

  @@map("doctors")
}

model Receptionist {
  employee_id Int     @id
  user        User    @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  visits      Visit[]

  @@map("receptionists")
}

model LabSupervisor {
  employee_id            Int                     @id
  user                   User                    @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  laboratoryExaminations LaboratoryExamination[]

  @@map("labSupervisors")
}

model LabAssistant {
  employee_id            Int                     @id
  user                   User                    @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  laboratoryExaminations LaboratoryExamination[]

  @@map("labAssistants")
}

model Patient {
  patient_id   Int     @id
  insurance_id String  @unique
  user         User    @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  visits       Visit[]

  @@map("patients")
}

model Visit {
  visit_id               Int                     @id @default(autoincrement())
  description            String
  diagnosis              String
  status                 Status                  @default(REGISTERED)
  doctor_id              Int
  patient_id             Int
  receptionist_id        Int
  laboratoryExaminations LaboratoryExamination[]
  physicalExaminations   PhysicalExamination[]
  doctor                 Doctor                  @relation(fields: [doctor_id], references: [employee_id])
  patient                Patient                 @relation(fields: [patient_id], references: [patient_id])
  receptionist           Receptionist            @relation(fields: [receptionist_id], references: [employee_id])

  @@map("visits")
}

model PhysicalExamination {
  physical_exam_id      Int                   @id @default(autoincrement())
  exam_code             Int                   @unique
  visit_id              Int
  examinationDictionary ExaminationDictionary @relation(fields: [exam_code], references: [code], onDelete: Cascade)
  visit                 Visit                 @relation(fields: [visit_id], references: [visit_id], onDelete: Cascade)

  @@map("physicExaminations")
}

model ExaminationDictionary {
  code           Int                    @id
  type           String
  description    String?
  laboratoryExam LaboratoryExamination?
  physicalExam   PhysicalExamination?

  @@map("examinationDictionaries")
}

model LaboratoryExamination {
  laboratory_exam_id           Int                   @id @default(autoincrement())
  doctorNotice                 String
  examinationStatus            ExaminationStatus
  supervisorNotice             String
  DateOfApprovalXorRejection   DateTime?
  DateOfExecutionXorCancelling DateTime?
  exam_code                    Int                   @unique
  visit_id                     Int
  lab_assistant_id             Int?
  lab_supervisor_id            Int?
  examinationDictionary        ExaminationDictionary @relation(fields: [exam_code], references: [code], onDelete: Cascade)
  lab_assistant                LabAssistant?         @relation(fields: [lab_assistant_id], references: [employee_id], onDelete: Cascade)
  lab_supervisor               LabSupervisor?        @relation(fields: [lab_supervisor_id], references: [employee_id], onDelete: Cascade)
  visit                        Visit                 @relation(fields: [visit_id], references: [visit_id], onDelete: Cascade)

  @@map("laboratoryExaminations")
}

enum Role {
  PATIENT
  DOCTOR
  LAB_SUPERVISOR
  LAB_ASSISTANT
  RECEPTIONIST
}

enum Status {
  REGISTERED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ExaminationStatus {
  ORDERED
  COMPLETED
  CANCELLED
  APPROVED
  REJECTED
}
